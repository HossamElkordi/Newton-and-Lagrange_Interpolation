#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 15, 2020 05:32:42 PM +0200  platform: Windows NT

import sys

from graphPlotter import graphPlotter

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import InterpolationGui_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    InterpolationGui_support.set_Tk_var()
    top = interpolation(root)
    InterpolationGui_support.init(root, top)
    root.mainloop()


w = None


def create_Interpolation(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_RootFinder(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    InterpolationGui_support.set_Tk_var()
    top = interpolation(w)
    InterpolationGui_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Interpolation():
    global w
    w.destroy()
    w = None


class interpolation:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("661x645+340+0")
        top.minsize(645, 690)
        top.maxsize(1370, 750)
        top.resizable(1, 1)
        top.title("Interpolation")
        top.configure(background="#4b4b4b")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.ouputArea = ttk.Notebook(top)
        self.ouputArea.place(relx=0.0, rely=0.667, relheight=0.3333, relwidth=1)
        self.ouputArea.configure(takefocus="")
        self.textConsole = tk.Frame(self.ouputArea)
        self.ouputArea.add(self.textConsole, padding=1)
        self.ouputArea.tab(0, text="Console", compound="left", underline="-1")
        self.textConsole.configure(background="#3e3e3e")
        self.textConsole.configure(highlightbackground="#d9d9d9")
        self.textConsole.configure(highlightcolor="#2327ba")
        self.graphConsole = tk.Frame(self.ouputArea)
        self.ouputArea.add(self.graphConsole, padding=1)
        self.ouputArea.tab(1, text="Graph", compound="left", underline="-1", )
        self.graphConsole.configure(background="#3e3e3e")
        self.graphConsole.configure(highlightbackground="#2327ba")
        self.graphConsole.configure(highlightcolor="#ffffff")

        self.textCanvas = tk.Text(self.textConsole)
        self.scrolText = ttk.Scrollbar(self.textConsole, command=self.textCanvas.yview)
        self.scrolText.pack(side=tk.RIGHT, fill=tk.Y)
        self.textCanvas.place(relx=0.0, rely=0.0, relheight=1, relwidth=1)
        self.textCanvas.configure(background="#3e3e3e")
        self.textCanvas.configure(foreground="#ffffff")

        self.chooseLbl = ttk.Label(top)
        self.chooseLbl.place(relx=0.02, rely=0.031, height=19, width=258)
        self.chooseLbl.configure(background="#4b4b4b")
        self.chooseLbl.configure(foreground="#ffffff")
        self.chooseLbl.configure(font="TkDefaultFont")
        self.chooseLbl.configure(relief="flat")
        self.chooseLbl.configure(anchor='e')
        self.chooseLbl.configure(justify='right')
        self.chooseLbl.configure(text='''Choose a method of solution :''')

        self.methodsCB = ttk.Combobox(top)
        self.methodsCB.place(relx=0.500, rely=0.031, relheight=0.033, relwidth=0.357)
        self.value_list = ['Newton method', 'Lagrange method']
        self.methodsCB.configure(values=self.value_list)
        self.methodsCB.configure(textvariable=InterpolationGui_support.combo_box)
        self.methodsCB.configure(foreground="#000000")
        self.methodsCB.configure(background="#ffffff")
        self.methodsCB.configure(takefocus="")
        self.methodsCB.current(0)

        self.xinputLbl = ttk.Label(top)
        self.xinputLbl.place(relx=0.02, rely=0.109, height=19, width=300)
        self.xinputLbl.configure(background="#4b4b4b")
        self.xinputLbl.configure(foreground="#ffffff")
        self.xinputLbl.configure(font="TkDefaultFont")
        self.xinputLbl.configure(relief="flat")
        self.xinputLbl.configure(anchor='e')
        self.xinputLbl.configure(justify='right')
        self.xinputLbl.configure(text='Enter the x coordinates in the form: x1,x2,x3,...')

        self.xinputEntry = ttk.Entry(top)
        self.xinputEntry.place(relx=0.500, rely=0.109, relheight=0.037, relwidth=0.357)
        self.xinputEntry.configure(takefocus="")
        self.xinputEntry.configure(cursor="arrow")
        self.xinputEntry.configure(textvariable=InterpolationGui_support.x_input)

        self.yinputLbl = ttk.Label(top)
        self.yinputLbl.place(relx=0.02, rely=0.202, height=19, width=300)
        self.yinputLbl.configure(background="#4b4b4b")
        self.yinputLbl.configure(foreground="#ffffff")
        self.yinputLbl.configure(font="TkDefaultFont")
        self.yinputLbl.configure(relief="flat")
        self.yinputLbl.configure(anchor='e')
        self.yinputLbl.configure(justify='right')
        self.yinputLbl.configure(text='''Enter the y coordinates in the form: y1,y2,y3,...''')

        self.yinputEntry = ttk.Entry(top)
        self.yinputEntry.place(relx=0.500, rely=0.202, relheight=0.037, relwidth=0.191)
        self.yinputEntry.configure(takefocus="")
        self.yinputEntry.configure(cursor="arrow")
        self.yinputEntry.configure(textvariable=InterpolationGui_support.y_input)

        self.pointsLbl = ttk.Label(top)
        self.pointsLbl.place(relx=0.02, rely=0.264, height=30, width=263)
        self.pointsLbl.configure(background="#4b4b4b")
        self.pointsLbl.configure(foreground="#ffffff")
        self.pointsLbl.configure(font="TkDefaultFont")
        self.pointsLbl.configure(relief="flat")
        self.pointsLbl.configure(anchor='e')
        self.pointsLbl.configure(justify='right')
        self.pointsLbl.configure(
            text='Enter the ''x'' you want to calculate with \n'
                 'the obtained curve in this form: x1,x2,x3,...')

        self.pointsEntry = ttk.Entry(top)
        self.pointsEntry.place(relx=0.500, rely=0.264, relheight=0.037, relwidth=0.191)
        self.pointsEntry.configure(takefocus="")
        self.pointsEntry.configure(cursor="arrow")
        self.pointsEntry.configure(textvariable=InterpolationGui_support.x_points)

        self.orderLbl = ttk.Label(top)
        self.orderLbl.place(relx=0.02, rely=0.326, height=19, width=258)
        self.orderLbl.configure(background="#4b4b4b")
        self.orderLbl.configure(foreground="#ffffff")
        self.orderLbl.configure(font="TkDefaultFont")
        self.orderLbl.configure(relief="flat")
        self.orderLbl.configure(anchor='e')
        self.orderLbl.configure(justify='right')
        self.orderLbl.configure(
            text='Enter the polynomial order:')

        self.orderEntry = ttk.Entry(top)
        self.orderEntry.place(relx=0.500, rely=0.326, relheight=0.037, relwidth=0.191)
        self.orderEntry.configure(takefocus="")
        self.orderEntry.configure(cursor="arrow")
        self.orderEntry.configure(textvariable=InterpolationGui_support.poly_order)
        # self.methodsCB.bind("<<ComboboxSelected>>", lambda frame=self.directFr, label=self.enterLbl:
        # self.itemChanged(frame, label))

        self.solveBtn = ttk.Button(top)
        self.solveBtn.place(relx=0.337, rely=0.605, height=25, width=136)
        self.solveBtn.configure(command=lambda txt=self.textCanvas, gph=self.graphConsole:
                                                    InterpolationGui_support.interpolate(txt, gph))
        self.solveBtn.configure(takefocus="")
        self.solveBtn.configure(text='''Solve''')


if __name__ == '__main__':
    vp_start_gui()